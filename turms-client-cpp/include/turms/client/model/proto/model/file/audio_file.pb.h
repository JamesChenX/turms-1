// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/file/audio_file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2ffile_2faudio_5ffile_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_model_2ffile_2faudio_5ffile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_model_2ffile_2faudio_5ffile_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2ffile_2faudio_5ffile_2eproto {
  static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class AudioFile;
struct AudioFileDefaultTypeInternal;
extern AudioFileDefaultTypeInternal _AudioFile_default_instance_;
class AudioFile_Description;
struct AudioFile_DescriptionDefaultTypeInternal;
extern AudioFile_DescriptionDefaultTypeInternal _AudioFile_Description_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class AudioFile_Description final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.AudioFile.Description) */ {
 public:
  inline AudioFile_Description() : AudioFile_Description(nullptr) {}
  ~AudioFile_Description() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AudioFile_Description(::google::protobuf::internal::ConstantInitialized);

  AudioFile_Description(const AudioFile_Description& from);
  AudioFile_Description(AudioFile_Description&& from) noexcept
    : AudioFile_Description() {
    *this = ::std::move(from);
  }

  inline AudioFile_Description& operator=(const AudioFile_Description& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFile_Description& operator=(AudioFile_Description&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AudioFile_Description& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioFile_Description* internal_default_instance() {
    return reinterpret_cast<const AudioFile_Description*>(
               &_AudioFile_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioFile_Description& a, AudioFile_Description& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFile_Description* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioFile_Description* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioFile_Description* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioFile_Description>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const AudioFile_Description& from);
  void MergeFrom(const AudioFile_Description& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioFile_Description* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.AudioFile.Description";
  }
  protected:
  explicit AudioFile_Description(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kFormatFieldNumber = 4,
    kDurationFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // string url = 1;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* ptr);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // optional string format = 4;
  bool has_format() const;
  void clear_format() ;
  const std::string& format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_format(Arg_&& arg, Args_... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* ptr);

  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(
      const std::string& value);
  std::string* _internal_mutable_format();

  public:
  // optional int32 duration = 2;
  bool has_duration() const;
  void clear_duration() ;
  ::int32_t duration() const;
  void set_duration(::int32_t value);

  private:
  ::int32_t _internal_duration() const;
  void _internal_set_duration(::int32_t value);

  public:
  // optional int32 size = 3;
  bool has_size() const;
  void clear_size() ;
  ::int32_t size() const;
  void set_size(::int32_t value);

  private:
  ::int32_t _internal_size() const;
  void _internal_set_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.AudioFile.Description)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 64, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr format_;
    ::int32_t duration_;
    ::int32_t size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_model_2ffile_2faudio_5ffile_2eproto;
};// -------------------------------------------------------------------

class AudioFile final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.AudioFile) */ {
 public:
  inline AudioFile() : AudioFile(nullptr) {}
  ~AudioFile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AudioFile(::google::protobuf::internal::ConstantInitialized);

  AudioFile(const AudioFile& from);
  AudioFile(AudioFile&& from) noexcept
    : AudioFile() {
    *this = ::std::move(from);
  }

  inline AudioFile& operator=(const AudioFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioFile& operator=(AudioFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AudioFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioFile* internal_default_instance() {
    return reinterpret_cast<const AudioFile*>(
               &_AudioFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioFile& a, AudioFile& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioFile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioFile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const AudioFile& from);
  void MergeFrom(const AudioFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioFile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.AudioFile";
  }
  protected:
  explicit AudioFile(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AudioFile_Description Description;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDescriptionFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // optional .turms.client.model.proto.AudioFile.Description description = 1;
  bool has_description() const;
  void clear_description() ;
  const ::turms::client::model::proto::AudioFile_Description& description() const;
  PROTOBUF_NODISCARD ::turms::client::model::proto::AudioFile_Description* release_description();
  ::turms::client::model::proto::AudioFile_Description* mutable_description();
  void set_allocated_description(::turms::client::model::proto::AudioFile_Description* value);
  void unsafe_arena_set_allocated_description(::turms::client::model::proto::AudioFile_Description* value);
  ::turms::client::model::proto::AudioFile_Description* unsafe_arena_release_description();

  private:
  const ::turms::client::model::proto::AudioFile_Description& _internal_description() const;
  ::turms::client::model::proto::AudioFile_Description* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.AudioFile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::turms::client::model::proto::AudioFile_Description* description_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_model_2ffile_2faudio_5ffile_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AudioFile_Description

// string url = 1;
inline void AudioFile_Description::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& AudioFile_Description::url() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.AudioFile.Description.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioFile_Description::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.AudioFile.Description.url)
}
inline std::string* AudioFile_Description::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.AudioFile.Description.url)
  return _s;
}
inline const std::string& AudioFile_Description::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void AudioFile_Description::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioFile_Description::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArenaForAllocation());
}
inline std::string* AudioFile_Description::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.AudioFile.Description.url)
  return _impl_.url_.Release();
}
inline void AudioFile_Description::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.AudioFile.Description.url)
}

// optional int32 duration = 2;
inline bool AudioFile_Description::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AudioFile_Description::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t AudioFile_Description::duration() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.AudioFile.Description.duration)
  return _internal_duration();
}
inline void AudioFile_Description::set_duration(::int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.AudioFile.Description.duration)
}
inline ::int32_t AudioFile_Description::_internal_duration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.duration_;
}
inline void AudioFile_Description::_internal_set_duration(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_ = value;
}

// optional int32 size = 3;
inline bool AudioFile_Description::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AudioFile_Description::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AudioFile_Description::size() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.AudioFile.Description.size)
  return _internal_size();
}
inline void AudioFile_Description::set_size(::int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.AudioFile.Description.size)
}
inline ::int32_t AudioFile_Description::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void AudioFile_Description::_internal_set_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.size_ = value;
}

// optional string format = 4;
inline bool AudioFile_Description::has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AudioFile_Description::clear_format() {
  _impl_.format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioFile_Description::format() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.AudioFile.Description.format)
  return _internal_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioFile_Description::set_format(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.format_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.AudioFile.Description.format)
}
inline std::string* AudioFile_Description::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.AudioFile.Description.format)
  return _s;
}
inline const std::string& AudioFile_Description::_internal_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.format_.Get();
}
inline void AudioFile_Description::_internal_set_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.format_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioFile_Description::_internal_mutable_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.format_.Mutable( GetArenaForAllocation());
}
inline std::string* AudioFile_Description::release_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.AudioFile.Description.format)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AudioFile_Description::set_allocated_format(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.format_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.format_.IsDefault()) {
          _impl_.format_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.AudioFile.Description.format)
}

// -------------------------------------------------------------------

// AudioFile

// optional .turms.client.model.proto.AudioFile.Description description = 1;
inline bool AudioFile::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.description_ != nullptr);
  return value;
}
inline void AudioFile::clear_description() {
  if (_impl_.description_ != nullptr) _impl_.description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::turms::client::model::proto::AudioFile_Description& AudioFile::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::turms::client::model::proto::AudioFile_Description* p = _impl_.description_;
  return p != nullptr ? *p : reinterpret_cast<const ::turms::client::model::proto::AudioFile_Description&>(::turms::client::model::proto::_AudioFile_Description_default_instance_);
}
inline const ::turms::client::model::proto::AudioFile_Description& AudioFile::description() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.AudioFile.description)
  return _internal_description();
}
inline void AudioFile::unsafe_arena_set_allocated_description(::turms::client::model::proto::AudioFile_Description* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.description_);
  }
  _impl_.description_ = reinterpret_cast<::turms::client::model::proto::AudioFile_Description*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.AudioFile.description)
}
inline ::turms::client::model::proto::AudioFile_Description* AudioFile::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::turms::client::model::proto::AudioFile_Description* released = _impl_.description_;
  _impl_.description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::turms::client::model::proto::AudioFile_Description* AudioFile::unsafe_arena_release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.AudioFile.description)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::turms::client::model::proto::AudioFile_Description* temp = _impl_.description_;
  _impl_.description_ = nullptr;
  return temp;
}
inline ::turms::client::model::proto::AudioFile_Description* AudioFile::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.description_ == nullptr) {
    auto* p = CreateMaybeMessage<::turms::client::model::proto::AudioFile_Description>(GetArenaForAllocation());
    _impl_.description_ = reinterpret_cast<::turms::client::model::proto::AudioFile_Description*>(p);
  }
  return _impl_.description_;
}
inline ::turms::client::model::proto::AudioFile_Description* AudioFile::mutable_description() {
  ::turms::client::model::proto::AudioFile_Description* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.AudioFile.description)
  return _msg;
}
inline void AudioFile::set_allocated_description(::turms::client::model::proto::AudioFile_Description* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::turms::client::model::proto::AudioFile_Description*>(_impl_.description_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::turms::client::model::proto::AudioFile_Description*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.description_ = reinterpret_cast<::turms::client::model::proto::AudioFile_Description*>(value);
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.AudioFile.description)
}

// optional bytes data = 2;
inline bool AudioFile::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AudioFile::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioFile::data() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.AudioFile.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioFile::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.AudioFile.data)
}
inline std::string* AudioFile::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.AudioFile.data)
  return _s;
}
inline const std::string& AudioFile::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void AudioFile::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioFile::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* AudioFile::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.AudioFile.data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AudioFile::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.AudioFile.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_model_2ffile_2faudio_5ffile_2eproto_2epb_2eh
