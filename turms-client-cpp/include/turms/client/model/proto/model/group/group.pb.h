// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/group/group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2fgroup_2fgroup_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_model_2fgroup_2fgroup_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_model_2fgroup_2fgroup_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2fgroup_2fgroup_2eproto {
  static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class Group;
struct GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class Group final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  ~Group() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Group(::google::protobuf::internal::ConstantInitialized);

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Group* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.Group";
  }
  protected:
  explicit Group(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kIntroFieldNumber = 6,
    kAnnouncementFieldNumber = 7,
    kIdFieldNumber = 1,
    kTypeIdFieldNumber = 2,
    kCreatorIdFieldNumber = 3,
    kOwnerIdFieldNumber = 4,
    kCreationDateFieldNumber = 8,
    kLastUpdatedDateFieldNumber = 9,
    kMuteEndDateFieldNumber = 10,
    kActiveFieldNumber = 11,
  };
  // optional string name = 5;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string intro = 6;
  bool has_intro() const;
  void clear_intro() ;
  const std::string& intro() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_intro(Arg_&& arg, Args_... args);
  std::string* mutable_intro();
  PROTOBUF_NODISCARD std::string* release_intro();
  void set_allocated_intro(std::string* ptr);

  private:
  const std::string& _internal_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intro(
      const std::string& value);
  std::string* _internal_mutable_intro();

  public:
  // optional string announcement = 7;
  bool has_announcement() const;
  void clear_announcement() ;
  const std::string& announcement() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_announcement(Arg_&& arg, Args_... args);
  std::string* mutable_announcement();
  PROTOBUF_NODISCARD std::string* release_announcement();
  void set_allocated_announcement(std::string* ptr);

  private:
  const std::string& _internal_announcement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement(
      const std::string& value);
  std::string* _internal_mutable_announcement();

  public:
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // optional int64 type_id = 2;
  bool has_type_id() const;
  void clear_type_id() ;
  ::int64_t type_id() const;
  void set_type_id(::int64_t value);

  private:
  ::int64_t _internal_type_id() const;
  void _internal_set_type_id(::int64_t value);

  public:
  // optional int64 creator_id = 3;
  bool has_creator_id() const;
  void clear_creator_id() ;
  ::int64_t creator_id() const;
  void set_creator_id(::int64_t value);

  private:
  ::int64_t _internal_creator_id() const;
  void _internal_set_creator_id(::int64_t value);

  public:
  // optional int64 owner_id = 4;
  bool has_owner_id() const;
  void clear_owner_id() ;
  ::int64_t owner_id() const;
  void set_owner_id(::int64_t value);

  private:
  ::int64_t _internal_owner_id() const;
  void _internal_set_owner_id(::int64_t value);

  public:
  // optional int64 creation_date = 8;
  bool has_creation_date() const;
  void clear_creation_date() ;
  ::int64_t creation_date() const;
  void set_creation_date(::int64_t value);

  private:
  ::int64_t _internal_creation_date() const;
  void _internal_set_creation_date(::int64_t value);

  public:
  // optional int64 last_updated_date = 9;
  bool has_last_updated_date() const;
  void clear_last_updated_date() ;
  ::int64_t last_updated_date() const;
  void set_last_updated_date(::int64_t value);

  private:
  ::int64_t _internal_last_updated_date() const;
  void _internal_set_last_updated_date(::int64_t value);

  public:
  // optional int64 mute_end_date = 10;
  bool has_mute_end_date() const;
  void clear_mute_end_date() ;
  ::int64_t mute_end_date() const;
  void set_mute_end_date(::int64_t value);

  private:
  ::int64_t _internal_mute_end_date() const;
  void _internal_set_mute_end_date(::int64_t value);

  public:
  // optional bool active = 11;
  bool has_active() const;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.Group)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 0, 68, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr intro_;
    ::google::protobuf::internal::ArenaStringPtr announcement_;
    ::int64_t id_;
    ::int64_t type_id_;
    ::int64_t creator_id_;
    ::int64_t owner_id_;
    ::int64_t creation_date_;
    ::int64_t last_updated_date_;
    ::int64_t mute_end_date_;
    bool active_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_model_2fgroup_2fgroup_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Group

// optional int64 id = 1;
inline bool Group::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Group::clear_id() {
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Group::id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.id)
  return _internal_id();
}
inline void Group::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.id)
}
inline ::int64_t Group::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Group::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}

// optional int64 type_id = 2;
inline bool Group::has_type_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Group::clear_type_id() {
  _impl_.type_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Group::type_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.type_id)
  return _internal_type_id();
}
inline void Group::set_type_id(::int64_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.type_id)
}
inline ::int64_t Group::_internal_type_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_id_;
}
inline void Group::_internal_set_type_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_id_ = value;
}

// optional int64 creator_id = 3;
inline bool Group::has_creator_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Group::clear_creator_id() {
  _impl_.creator_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Group::creator_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.creator_id)
  return _internal_creator_id();
}
inline void Group::set_creator_id(::int64_t value) {
  _internal_set_creator_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.creator_id)
}
inline ::int64_t Group::_internal_creator_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.creator_id_;
}
inline void Group::_internal_set_creator_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.creator_id_ = value;
}

// optional int64 owner_id = 4;
inline bool Group::has_owner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Group::clear_owner_id() {
  _impl_.owner_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Group::owner_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.owner_id)
  return _internal_owner_id();
}
inline void Group::set_owner_id(::int64_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.owner_id)
}
inline ::int64_t Group::_internal_owner_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.owner_id_;
}
inline void Group::_internal_set_owner_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.owner_id_ = value;
}

// optional string name = 5;
inline bool Group::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Group::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Group::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.name)
}
inline std::string* Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.Group.name)
  return _s;
}
inline const std::string& Group::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Group::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Group::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Group::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.Group.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Group::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.Group.name)
}

// optional string intro = 6;
inline bool Group::has_intro() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Group::clear_intro() {
  _impl_.intro_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Group::intro() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.intro)
  return _internal_intro();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Group::set_intro(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.intro_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.intro)
}
inline std::string* Group::mutable_intro() {
  std::string* _s = _internal_mutable_intro();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.Group.intro)
  return _s;
}
inline const std::string& Group::_internal_intro() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intro_.Get();
}
inline void Group::_internal_set_intro(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.intro_.Set(value, GetArenaForAllocation());
}
inline std::string* Group::_internal_mutable_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.intro_.Mutable( GetArenaForAllocation());
}
inline std::string* Group::release_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.Group.intro)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.intro_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.intro_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Group::set_allocated_intro(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.intro_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.intro_.IsDefault()) {
          _impl_.intro_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.Group.intro)
}

// optional string announcement = 7;
inline bool Group::has_announcement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Group::clear_announcement() {
  _impl_.announcement_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Group::announcement() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.announcement)
  return _internal_announcement();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Group::set_announcement(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.announcement_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.announcement)
}
inline std::string* Group::mutable_announcement() {
  std::string* _s = _internal_mutable_announcement();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.Group.announcement)
  return _s;
}
inline const std::string& Group::_internal_announcement() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.announcement_.Get();
}
inline void Group::_internal_set_announcement(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.announcement_.Set(value, GetArenaForAllocation());
}
inline std::string* Group::_internal_mutable_announcement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.announcement_.Mutable( GetArenaForAllocation());
}
inline std::string* Group::release_announcement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.Group.announcement)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.announcement_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.announcement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Group::set_allocated_announcement(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.announcement_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.announcement_.IsDefault()) {
          _impl_.announcement_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.Group.announcement)
}

// optional int64 creation_date = 8;
inline bool Group::has_creation_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Group::clear_creation_date() {
  _impl_.creation_date_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Group::creation_date() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.creation_date)
  return _internal_creation_date();
}
inline void Group::set_creation_date(::int64_t value) {
  _internal_set_creation_date(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.creation_date)
}
inline ::int64_t Group::_internal_creation_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.creation_date_;
}
inline void Group::_internal_set_creation_date(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.creation_date_ = value;
}

// optional int64 last_updated_date = 9;
inline bool Group::has_last_updated_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Group::clear_last_updated_date() {
  _impl_.last_updated_date_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Group::last_updated_date() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.last_updated_date)
  return _internal_last_updated_date();
}
inline void Group::set_last_updated_date(::int64_t value) {
  _internal_set_last_updated_date(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.last_updated_date)
}
inline ::int64_t Group::_internal_last_updated_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_updated_date_;
}
inline void Group::_internal_set_last_updated_date(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.last_updated_date_ = value;
}

// optional int64 mute_end_date = 10;
inline bool Group::has_mute_end_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Group::clear_mute_end_date() {
  _impl_.mute_end_date_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t Group::mute_end_date() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.mute_end_date)
  return _internal_mute_end_date();
}
inline void Group::set_mute_end_date(::int64_t value) {
  _internal_set_mute_end_date(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.mute_end_date)
}
inline ::int64_t Group::_internal_mute_end_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mute_end_date_;
}
inline void Group::_internal_set_mute_end_date(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.mute_end_date_ = value;
}

// optional bool active = 11;
inline bool Group::has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Group::clear_active() {
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Group::active() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.Group.active)
  return _internal_active();
}
inline void Group::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.Group.active)
}
inline bool Group::_internal_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_;
}
inline void Group::_internal_set_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.active_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_model_2fgroup_2fgroup_2eproto_2epb_2eh
