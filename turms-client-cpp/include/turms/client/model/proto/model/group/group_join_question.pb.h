// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/group/group_join_question.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2fgroup_2fgroup_5fjoin_5fquestion_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_model_2fgroup_2fgroup_5fjoin_5fquestion_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_model_2fgroup_2fgroup_5fjoin_5fquestion_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2fgroup_2fgroup_5fjoin_5fquestion_2eproto {
  static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class GroupJoinQuestion;
struct GroupJoinQuestionDefaultTypeInternal;
extern GroupJoinQuestionDefaultTypeInternal _GroupJoinQuestion_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class GroupJoinQuestion final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.GroupJoinQuestion) */ {
 public:
  inline GroupJoinQuestion() : GroupJoinQuestion(nullptr) {}
  ~GroupJoinQuestion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GroupJoinQuestion(::google::protobuf::internal::ConstantInitialized);

  GroupJoinQuestion(const GroupJoinQuestion& from);
  GroupJoinQuestion(GroupJoinQuestion&& from) noexcept
    : GroupJoinQuestion() {
    *this = ::std::move(from);
  }

  inline GroupJoinQuestion& operator=(const GroupJoinQuestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupJoinQuestion& operator=(GroupJoinQuestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GroupJoinQuestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupJoinQuestion* internal_default_instance() {
    return reinterpret_cast<const GroupJoinQuestion*>(
               &_GroupJoinQuestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupJoinQuestion& a, GroupJoinQuestion& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupJoinQuestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupJoinQuestion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupJoinQuestion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupJoinQuestion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const GroupJoinQuestion& from);
  void MergeFrom(const GroupJoinQuestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupJoinQuestion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.GroupJoinQuestion";
  }
  protected:
  explicit GroupJoinQuestion(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswersFieldNumber = 4,
    kQuestionFieldNumber = 3,
    kIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kScoreFieldNumber = 5,
  };
  // repeated string answers = 4;
  int answers_size() const;
  private:
  int _internal_answers_size() const;

  public:
  void clear_answers() ;
  const std::string& answers(int index) const;
  std::string* mutable_answers(int index);
  void set_answers(int index, const std::string& value);
  void set_answers(int index, std::string&& value);
  void set_answers(int index, const char* value);
  void set_answers(int index, const char* value, std::size_t size);
  void set_answers(int index, absl::string_view value);
  std::string* add_answers();
  void add_answers(const std::string& value);
  void add_answers(std::string&& value);
  void add_answers(const char* value);
  void add_answers(const char* value, std::size_t size);
  void add_answers(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& answers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_answers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_answers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_answers();

  public:
  // optional string question = 3;
  bool has_question() const;
  void clear_question() ;
  const std::string& question() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_question(Arg_&& arg, Args_... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* ptr);

  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(
      const std::string& value);
  std::string* _internal_mutable_question();

  public:
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // optional int64 group_id = 2;
  bool has_group_id() const;
  void clear_group_id() ;
  ::int64_t group_id() const;
  void set_group_id(::int64_t value);

  private:
  ::int64_t _internal_group_id() const;
  void _internal_set_group_id(::int64_t value);

  public:
  // optional int32 score = 5;
  bool has_score() const;
  void clear_score() ;
  ::int32_t score() const;
  void set_score(::int32_t value);

  private:
  ::int32_t _internal_score() const;
  void _internal_set_score(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.GroupJoinQuestion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 66, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> answers_;
    ::google::protobuf::internal::ArenaStringPtr question_;
    ::int64_t id_;
    ::int64_t group_id_;
    ::int32_t score_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_model_2fgroup_2fgroup_5fjoin_5fquestion_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GroupJoinQuestion

// optional int64 id = 1;
inline bool GroupJoinQuestion::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GroupJoinQuestion::clear_id() {
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t GroupJoinQuestion::id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.GroupJoinQuestion.id)
  return _internal_id();
}
inline void GroupJoinQuestion::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.GroupJoinQuestion.id)
}
inline ::int64_t GroupJoinQuestion::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void GroupJoinQuestion::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}

// optional int64 group_id = 2;
inline bool GroupJoinQuestion::has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GroupJoinQuestion::clear_group_id() {
  _impl_.group_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t GroupJoinQuestion::group_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.GroupJoinQuestion.group_id)
  return _internal_group_id();
}
inline void GroupJoinQuestion::set_group_id(::int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.GroupJoinQuestion.group_id)
}
inline ::int64_t GroupJoinQuestion::_internal_group_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_id_;
}
inline void GroupJoinQuestion::_internal_set_group_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}

// optional string question = 3;
inline bool GroupJoinQuestion::has_question() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GroupJoinQuestion::clear_question() {
  _impl_.question_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GroupJoinQuestion::question() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.GroupJoinQuestion.question)
  return _internal_question();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupJoinQuestion::set_question(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.question_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.GroupJoinQuestion.question)
}
inline std::string* GroupJoinQuestion::mutable_question() {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.GroupJoinQuestion.question)
  return _s;
}
inline const std::string& GroupJoinQuestion::_internal_question() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.question_.Get();
}
inline void GroupJoinQuestion::_internal_set_question(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.question_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupJoinQuestion::_internal_mutable_question() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.question_.Mutable( GetArenaForAllocation());
}
inline std::string* GroupJoinQuestion::release_question() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.GroupJoinQuestion.question)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.question_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.question_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GroupJoinQuestion::set_allocated_question(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.question_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.question_.IsDefault()) {
          _impl_.question_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.GroupJoinQuestion.question)
}

// repeated string answers = 4;
inline int GroupJoinQuestion::_internal_answers_size() const {
  return _internal_answers().size();
}
inline int GroupJoinQuestion::answers_size() const {
  return _internal_answers_size();
}
inline void GroupJoinQuestion::clear_answers() {
  _internal_mutable_answers()->Clear();
}
inline std::string* GroupJoinQuestion::add_answers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_answers()->Add();
  // @@protoc_insertion_point(field_add_mutable:turms.client.model.proto.GroupJoinQuestion.answers)
  return _s;
}
inline const std::string& GroupJoinQuestion::answers(int index) const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.GroupJoinQuestion.answers)
  return _internal_answers().Get(index);
}
inline std::string* GroupJoinQuestion::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.GroupJoinQuestion.answers)
  return _internal_mutable_answers()->Mutable(index);
}
inline void GroupJoinQuestion::set_answers(int index, const std::string& value) {
  _internal_mutable_answers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::set_answers(int index, std::string&& value) {
  _internal_mutable_answers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::set_answers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_answers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::set_answers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_answers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::set_answers(int index, absl::string_view value) {
  _internal_mutable_answers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::add_answers(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_answers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::add_answers(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_answers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::add_answers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_answers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::add_answers(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_answers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline void GroupJoinQuestion::add_answers(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_answers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:turms.client.model.proto.GroupJoinQuestion.answers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GroupJoinQuestion::answers() const {
  // @@protoc_insertion_point(field_list:turms.client.model.proto.GroupJoinQuestion.answers)
  return _internal_answers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* GroupJoinQuestion::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:turms.client.model.proto.GroupJoinQuestion.answers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_answers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GroupJoinQuestion::_internal_answers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.answers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GroupJoinQuestion::_internal_mutable_answers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.answers_;
}

// optional int32 score = 5;
inline bool GroupJoinQuestion::has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GroupJoinQuestion::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t GroupJoinQuestion::score() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.GroupJoinQuestion.score)
  return _internal_score();
}
inline void GroupJoinQuestion::set_score(::int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.GroupJoinQuestion.score)
}
inline ::int32_t GroupJoinQuestion::_internal_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.score_;
}
inline void GroupJoinQuestion::_internal_set_score(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.score_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_model_2fgroup_2fgroup_5fjoin_5fquestion_2eproto_2epb_2eh
