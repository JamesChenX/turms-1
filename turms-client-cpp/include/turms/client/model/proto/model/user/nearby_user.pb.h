// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model/user/nearby_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2fuser_2fnearby_5fuser_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_model_2fuser_2fnearby_5fuser_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "turms/client/model/proto/constant/device_type.pb.h"
#include "turms/client/model/proto/model/user/user_location.pb.h"
#include "turms/client/model/proto/model/user/user_info.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_model_2fuser_2fnearby_5fuser_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2fuser_2fnearby_5fuser_2eproto {
  static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class NearbyUser;
struct NearbyUserDefaultTypeInternal;
extern NearbyUserDefaultTypeInternal _NearbyUser_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class NearbyUser final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.NearbyUser) */ {
 public:
  inline NearbyUser() : NearbyUser(nullptr) {}
  ~NearbyUser() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NearbyUser(::google::protobuf::internal::ConstantInitialized);

  NearbyUser(const NearbyUser& from);
  NearbyUser(NearbyUser&& from) noexcept
    : NearbyUser() {
    *this = ::std::move(from);
  }

  inline NearbyUser& operator=(const NearbyUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearbyUser& operator=(NearbyUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NearbyUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const NearbyUser* internal_default_instance() {
    return reinterpret_cast<const NearbyUser*>(
               &_NearbyUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NearbyUser& a, NearbyUser& b) {
    a.Swap(&b);
  }
  inline void Swap(NearbyUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearbyUser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NearbyUser* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NearbyUser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const NearbyUser& from);
  void MergeFrom(const NearbyUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NearbyUser* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.NearbyUser";
  }
  protected:
  explicit NearbyUser(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 3,
    kLocationFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kDistanceFieldNumber = 4,
  };
  // optional .turms.client.model.proto.UserInfo info = 3;
  bool has_info() const;
  void clear_info() ;
  const ::turms::client::model::proto::UserInfo& info() const;
  PROTOBUF_NODISCARD ::turms::client::model::proto::UserInfo* release_info();
  ::turms::client::model::proto::UserInfo* mutable_info();
  void set_allocated_info(::turms::client::model::proto::UserInfo* value);
  void unsafe_arena_set_allocated_info(::turms::client::model::proto::UserInfo* value);
  ::turms::client::model::proto::UserInfo* unsafe_arena_release_info();

  private:
  const ::turms::client::model::proto::UserInfo& _internal_info() const;
  ::turms::client::model::proto::UserInfo* _internal_mutable_info();

  public:
  // optional .turms.client.model.proto.UserLocation location = 5;
  bool has_location() const;
  void clear_location() ;
  const ::turms::client::model::proto::UserLocation& location() const;
  PROTOBUF_NODISCARD ::turms::client::model::proto::UserLocation* release_location();
  ::turms::client::model::proto::UserLocation* mutable_location();
  void set_allocated_location(::turms::client::model::proto::UserLocation* value);
  void unsafe_arena_set_allocated_location(::turms::client::model::proto::UserLocation* value);
  ::turms::client::model::proto::UserLocation* unsafe_arena_release_location();

  private:
  const ::turms::client::model::proto::UserLocation& _internal_location() const;
  ::turms::client::model::proto::UserLocation* _internal_mutable_location();

  public:
  // int64 user_id = 1;
  void clear_user_id() ;
  ::int64_t user_id() const;
  void set_user_id(::int64_t value);

  private:
  ::int64_t _internal_user_id() const;
  void _internal_set_user_id(::int64_t value);

  public:
  // optional .turms.client.model.proto.DeviceType device_type = 2;
  bool has_device_type() const;
  void clear_device_type() ;
  ::turms::client::model::proto::DeviceType device_type() const;
  void set_device_type(::turms::client::model::proto::DeviceType value);

  private:
  ::turms::client::model::proto::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::turms::client::model::proto::DeviceType value);

  public:
  // optional int32 distance = 4;
  bool has_distance() const;
  void clear_distance() ;
  ::int32_t distance() const;
  void set_distance(::int32_t value);

  private:
  ::int32_t _internal_distance() const;
  void _internal_set_distance(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.NearbyUser)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::turms::client::model::proto::UserInfo* info_;
    ::turms::client::model::proto::UserLocation* location_;
    ::int64_t user_id_;
    int device_type_;
    ::int32_t distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_model_2fuser_2fnearby_5fuser_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NearbyUser

// int64 user_id = 1;
inline void NearbyUser::clear_user_id() {
  _impl_.user_id_ = ::int64_t{0};
}
inline ::int64_t NearbyUser::user_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.NearbyUser.user_id)
  return _internal_user_id();
}
inline void NearbyUser::set_user_id(::int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.NearbyUser.user_id)
}
inline ::int64_t NearbyUser::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void NearbyUser::_internal_set_user_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// optional .turms.client.model.proto.DeviceType device_type = 2;
inline bool NearbyUser::has_device_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NearbyUser::clear_device_type() {
  _impl_.device_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::turms::client::model::proto::DeviceType NearbyUser::device_type() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.NearbyUser.device_type)
  return _internal_device_type();
}
inline void NearbyUser::set_device_type(::turms::client::model::proto::DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.NearbyUser.device_type)
}
inline ::turms::client::model::proto::DeviceType NearbyUser::_internal_device_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::turms::client::model::proto::DeviceType>(_impl_.device_type_);
}
inline void NearbyUser::_internal_set_device_type(::turms::client::model::proto::DeviceType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.device_type_ = value;
}

// optional .turms.client.model.proto.UserInfo info = 3;
inline bool NearbyUser::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::turms::client::model::proto::UserInfo& NearbyUser::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::turms::client::model::proto::UserInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::turms::client::model::proto::UserInfo&>(::turms::client::model::proto::_UserInfo_default_instance_);
}
inline const ::turms::client::model::proto::UserInfo& NearbyUser::info() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.NearbyUser.info)
  return _internal_info();
}
inline void NearbyUser::unsafe_arena_set_allocated_info(::turms::client::model::proto::UserInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::turms::client::model::proto::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.NearbyUser.info)
}
inline ::turms::client::model::proto::UserInfo* NearbyUser::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::turms::client::model::proto::UserInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::turms::client::model::proto::UserInfo* NearbyUser::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.NearbyUser.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::turms::client::model::proto::UserInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::turms::client::model::proto::UserInfo* NearbyUser::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::turms::client::model::proto::UserInfo>(GetArenaForAllocation());
    _impl_.info_ = reinterpret_cast<::turms::client::model::proto::UserInfo*>(p);
  }
  return _impl_.info_;
}
inline ::turms::client::model::proto::UserInfo* NearbyUser::mutable_info() {
  ::turms::client::model::proto::UserInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.NearbyUser.info)
  return _msg;
}
inline void NearbyUser::set_allocated_info(::turms::client::model::proto::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::turms::client::model::proto::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.NearbyUser.info)
}

// optional int32 distance = 4;
inline bool NearbyUser::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NearbyUser::clear_distance() {
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t NearbyUser::distance() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.NearbyUser.distance)
  return _internal_distance();
}
inline void NearbyUser::set_distance(::int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.NearbyUser.distance)
}
inline ::int32_t NearbyUser::_internal_distance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.distance_;
}
inline void NearbyUser::_internal_set_distance(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.distance_ = value;
}

// optional .turms.client.model.proto.UserLocation location = 5;
inline bool NearbyUser::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::turms::client::model::proto::UserLocation& NearbyUser::_internal_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::turms::client::model::proto::UserLocation* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::turms::client::model::proto::UserLocation&>(::turms::client::model::proto::_UserLocation_default_instance_);
}
inline const ::turms::client::model::proto::UserLocation& NearbyUser::location() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.NearbyUser.location)
  return _internal_location();
}
inline void NearbyUser::unsafe_arena_set_allocated_location(::turms::client::model::proto::UserLocation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::turms::client::model::proto::UserLocation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.NearbyUser.location)
}
inline ::turms::client::model::proto::UserLocation* NearbyUser::release_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::turms::client::model::proto::UserLocation* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::turms::client::model::proto::UserLocation* NearbyUser::unsafe_arena_release_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.NearbyUser.location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::turms::client::model::proto::UserLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::turms::client::model::proto::UserLocation* NearbyUser::_internal_mutable_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::turms::client::model::proto::UserLocation>(GetArenaForAllocation());
    _impl_.location_ = reinterpret_cast<::turms::client::model::proto::UserLocation*>(p);
  }
  return _impl_.location_;
}
inline ::turms::client::model::proto::UserLocation* NearbyUser::mutable_location() {
  ::turms::client::model::proto::UserLocation* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.NearbyUser.location)
  return _msg;
}
inline void NearbyUser::set_allocated_location(::turms::client::model::proto::UserLocation* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.location_ = reinterpret_cast<::turms::client::model::proto::UserLocation*>(value);
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.NearbyUser.location)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_model_2fuser_2fnearby_5fuser_2eproto_2epb_2eh
