// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request/group/update_group_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2fgroup_2fupdate_5fgroup_5frequest_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_request_2fgroup_2fupdate_5fgroup_5frequest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_request_2fgroup_2fupdate_5fgroup_5frequest_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2fgroup_2fupdate_5fgroup_5frequest_2eproto {
  static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class UpdateGroupRequest;
struct UpdateGroupRequestDefaultTypeInternal;
extern UpdateGroupRequestDefaultTypeInternal _UpdateGroupRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class UpdateGroupRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.UpdateGroupRequest) */ {
 public:
  inline UpdateGroupRequest() : UpdateGroupRequest(nullptr) {}
  ~UpdateGroupRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateGroupRequest(::google::protobuf::internal::ConstantInitialized);

  UpdateGroupRequest(const UpdateGroupRequest& from);
  UpdateGroupRequest(UpdateGroupRequest&& from) noexcept
    : UpdateGroupRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGroupRequest& operator=(const UpdateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGroupRequest& operator=(UpdateGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UpdateGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGroupRequest*>(
               &_UpdateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateGroupRequest& a, UpdateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateGroupRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateGroupRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateGroupRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const UpdateGroupRequest& from);
  void MergeFrom(const UpdateGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateGroupRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.UpdateGroupRequest";
  }
  protected:
  explicit UpdateGroupRequest(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIntroFieldNumber = 4,
    kAnnouncementFieldNumber = 5,
    kGroupIdFieldNumber = 1,
    kQuitAfterTransferFieldNumber = 2,
    kMinScoreFieldNumber = 6,
    kTypeIdFieldNumber = 7,
    kMuteEndDateFieldNumber = 8,
    kSuccessorIdFieldNumber = 9,
  };
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string intro = 4;
  bool has_intro() const;
  void clear_intro() ;
  const std::string& intro() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_intro(Arg_&& arg, Args_... args);
  std::string* mutable_intro();
  PROTOBUF_NODISCARD std::string* release_intro();
  void set_allocated_intro(std::string* ptr);

  private:
  const std::string& _internal_intro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intro(
      const std::string& value);
  std::string* _internal_mutable_intro();

  public:
  // optional string announcement = 5;
  bool has_announcement() const;
  void clear_announcement() ;
  const std::string& announcement() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_announcement(Arg_&& arg, Args_... args);
  std::string* mutable_announcement();
  PROTOBUF_NODISCARD std::string* release_announcement();
  void set_allocated_announcement(std::string* ptr);

  private:
  const std::string& _internal_announcement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement(
      const std::string& value);
  std::string* _internal_mutable_announcement();

  public:
  // int64 group_id = 1;
  void clear_group_id() ;
  ::int64_t group_id() const;
  void set_group_id(::int64_t value);

  private:
  ::int64_t _internal_group_id() const;
  void _internal_set_group_id(::int64_t value);

  public:
  // optional bool quit_after_transfer = 2;
  bool has_quit_after_transfer() const;
  void clear_quit_after_transfer() ;
  bool quit_after_transfer() const;
  void set_quit_after_transfer(bool value);

  private:
  bool _internal_quit_after_transfer() const;
  void _internal_set_quit_after_transfer(bool value);

  public:
  // optional int32 min_score = 6;
  bool has_min_score() const;
  void clear_min_score() ;
  ::int32_t min_score() const;
  void set_min_score(::int32_t value);

  private:
  ::int32_t _internal_min_score() const;
  void _internal_set_min_score(::int32_t value);

  public:
  // optional int64 type_id = 7;
  bool has_type_id() const;
  void clear_type_id() ;
  ::int64_t type_id() const;
  void set_type_id(::int64_t value);

  private:
  ::int64_t _internal_type_id() const;
  void _internal_set_type_id(::int64_t value);

  public:
  // optional int64 mute_end_date = 8;
  bool has_mute_end_date() const;
  void clear_mute_end_date() ;
  ::int64_t mute_end_date() const;
  void set_mute_end_date(::int64_t value);

  private:
  ::int64_t _internal_mute_end_date() const;
  void _internal_set_mute_end_date(::int64_t value);

  public:
  // optional int64 successor_id = 9;
  bool has_successor_id() const;
  void clear_successor_id() ;
  ::int64_t successor_id() const;
  void set_successor_id(::int64_t value);

  private:
  ::int64_t _internal_successor_id() const;
  void _internal_set_successor_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.UpdateGroupRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 81, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr intro_;
    ::google::protobuf::internal::ArenaStringPtr announcement_;
    ::int64_t group_id_;
    bool quit_after_transfer_;
    ::int32_t min_score_;
    ::int64_t type_id_;
    ::int64_t mute_end_date_;
    ::int64_t successor_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2fgroup_2fupdate_5fgroup_5frequest_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UpdateGroupRequest

// int64 group_id = 1;
inline void UpdateGroupRequest::clear_group_id() {
  _impl_.group_id_ = ::int64_t{0};
}
inline ::int64_t UpdateGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.group_id)
  return _internal_group_id();
}
inline void UpdateGroupRequest::set_group_id(::int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.group_id)
}
inline ::int64_t UpdateGroupRequest::_internal_group_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_id_;
}
inline void UpdateGroupRequest::_internal_set_group_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.group_id_ = value;
}

// optional bool quit_after_transfer = 2;
inline bool UpdateGroupRequest::has_quit_after_transfer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_quit_after_transfer() {
  _impl_.quit_after_transfer_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool UpdateGroupRequest::quit_after_transfer() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.quit_after_transfer)
  return _internal_quit_after_transfer();
}
inline void UpdateGroupRequest::set_quit_after_transfer(bool value) {
  _internal_set_quit_after_transfer(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.quit_after_transfer)
}
inline bool UpdateGroupRequest::_internal_quit_after_transfer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quit_after_transfer_;
}
inline void UpdateGroupRequest::_internal_set_quit_after_transfer(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.quit_after_transfer_ = value;
}

// optional string name = 3;
inline bool UpdateGroupRequest::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateGroupRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.name)
}
inline std::string* UpdateGroupRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.UpdateGroupRequest.name)
  return _s;
}
inline const std::string& UpdateGroupRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void UpdateGroupRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateGroupRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateGroupRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.UpdateGroupRequest.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UpdateGroupRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.UpdateGroupRequest.name)
}

// optional string intro = 4;
inline bool UpdateGroupRequest::has_intro() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_intro() {
  _impl_.intro_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdateGroupRequest::intro() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.intro)
  return _internal_intro();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateGroupRequest::set_intro(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.intro_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.intro)
}
inline std::string* UpdateGroupRequest::mutable_intro() {
  std::string* _s = _internal_mutable_intro();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.UpdateGroupRequest.intro)
  return _s;
}
inline const std::string& UpdateGroupRequest::_internal_intro() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intro_.Get();
}
inline void UpdateGroupRequest::_internal_set_intro(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.intro_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateGroupRequest::_internal_mutable_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.intro_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateGroupRequest::release_intro() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.UpdateGroupRequest.intro)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.intro_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.intro_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UpdateGroupRequest::set_allocated_intro(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.intro_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.intro_.IsDefault()) {
          _impl_.intro_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.UpdateGroupRequest.intro)
}

// optional string announcement = 5;
inline bool UpdateGroupRequest::has_announcement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_announcement() {
  _impl_.announcement_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UpdateGroupRequest::announcement() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.announcement)
  return _internal_announcement();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateGroupRequest::set_announcement(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.announcement_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.announcement)
}
inline std::string* UpdateGroupRequest::mutable_announcement() {
  std::string* _s = _internal_mutable_announcement();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.UpdateGroupRequest.announcement)
  return _s;
}
inline const std::string& UpdateGroupRequest::_internal_announcement() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.announcement_.Get();
}
inline void UpdateGroupRequest::_internal_set_announcement(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.announcement_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateGroupRequest::_internal_mutable_announcement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.announcement_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateGroupRequest::release_announcement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.UpdateGroupRequest.announcement)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.announcement_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.announcement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UpdateGroupRequest::set_allocated_announcement(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.announcement_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.announcement_.IsDefault()) {
          _impl_.announcement_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.UpdateGroupRequest.announcement)
}

// optional int32 min_score = 6;
inline bool UpdateGroupRequest::has_min_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_min_score() {
  _impl_.min_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t UpdateGroupRequest::min_score() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.min_score)
  return _internal_min_score();
}
inline void UpdateGroupRequest::set_min_score(::int32_t value) {
  _internal_set_min_score(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.min_score)
}
inline ::int32_t UpdateGroupRequest::_internal_min_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_score_;
}
inline void UpdateGroupRequest::_internal_set_min_score(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_score_ = value;
}

// optional int64 type_id = 7;
inline bool UpdateGroupRequest::has_type_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_type_id() {
  _impl_.type_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t UpdateGroupRequest::type_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.type_id)
  return _internal_type_id();
}
inline void UpdateGroupRequest::set_type_id(::int64_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.type_id)
}
inline ::int64_t UpdateGroupRequest::_internal_type_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_id_;
}
inline void UpdateGroupRequest::_internal_set_type_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_id_ = value;
}

// optional int64 mute_end_date = 8;
inline bool UpdateGroupRequest::has_mute_end_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_mute_end_date() {
  _impl_.mute_end_date_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t UpdateGroupRequest::mute_end_date() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.mute_end_date)
  return _internal_mute_end_date();
}
inline void UpdateGroupRequest::set_mute_end_date(::int64_t value) {
  _internal_set_mute_end_date(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.mute_end_date)
}
inline ::int64_t UpdateGroupRequest::_internal_mute_end_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mute_end_date_;
}
inline void UpdateGroupRequest::_internal_set_mute_end_date(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mute_end_date_ = value;
}

// optional int64 successor_id = 9;
inline bool UpdateGroupRequest::has_successor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void UpdateGroupRequest::clear_successor_id() {
  _impl_.successor_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t UpdateGroupRequest::successor_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.UpdateGroupRequest.successor_id)
  return _internal_successor_id();
}
inline void UpdateGroupRequest::set_successor_id(::int64_t value) {
  _internal_set_successor_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.UpdateGroupRequest.successor_id)
}
inline ::int64_t UpdateGroupRequest::_internal_successor_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.successor_id_;
}
inline void UpdateGroupRequest::_internal_set_successor_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.successor_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_request_2fgroup_2fupdate_5fgroup_5frequest_2eproto_2epb_2eh
