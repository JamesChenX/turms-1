// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request/message/create_message_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2fmessage_2fcreate_5fmessage_5frequest_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_request_2fmessage_2fcreate_5fmessage_5frequest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_request_2fmessage_2fcreate_5fmessage_5frequest_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2fmessage_2fcreate_5fmessage_5frequest_2eproto {
  static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class CreateMessageRequest;
struct CreateMessageRequestDefaultTypeInternal;
extern CreateMessageRequestDefaultTypeInternal _CreateMessageRequest_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class CreateMessageRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.CreateMessageRequest) */ {
 public:
  inline CreateMessageRequest() : CreateMessageRequest(nullptr) {}
  ~CreateMessageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateMessageRequest(::google::protobuf::internal::ConstantInitialized);

  CreateMessageRequest(const CreateMessageRequest& from);
  CreateMessageRequest(CreateMessageRequest&& from) noexcept
    : CreateMessageRequest() {
    *this = ::std::move(from);
  }

  inline CreateMessageRequest& operator=(const CreateMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMessageRequest& operator=(CreateMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CreateMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMessageRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMessageRequest*>(
               &_CreateMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateMessageRequest& a, CreateMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMessageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMessageRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const CreateMessageRequest& from);
  void MergeFrom(const CreateMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateMessageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.CreateMessageRequest";
  }
  protected:
  explicit CreateMessageRequest(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 7,
    kTextFieldNumber = 6,
    kMessageIdFieldNumber = 1,
    kGroupIdFieldNumber = 3,
    kRecipientIdFieldNumber = 4,
    kDeliveryDateFieldNumber = 5,
    kIsSystemMessageFieldNumber = 2,
    kBurnAfterFieldNumber = 8,
    kPreMessageIdFieldNumber = 9,
  };
  // repeated bytes records = 7;
  int records_size() const;
  private:
  int _internal_records_size() const;

  public:
  void clear_records() ;
  const std::string& records(int index) const;
  std::string* mutable_records(int index);
  void set_records(int index, const std::string& value);
  void set_records(int index, std::string&& value);
  void set_records(int index, const char* value);
  void set_records(int index, const void* value, std::size_t size);
  void set_records(int index, absl::string_view value);
  std::string* add_records();
  void add_records(const std::string& value);
  void add_records(std::string&& value);
  void add_records(const char* value);
  void add_records(const void* value, std::size_t size);
  void add_records(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& records() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_records();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_records() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_records();

  public:
  // optional string text = 6;
  bool has_text() const;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* ptr);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // optional int64 message_id = 1;
  bool has_message_id() const;
  void clear_message_id() ;
  ::int64_t message_id() const;
  void set_message_id(::int64_t value);

  private:
  ::int64_t _internal_message_id() const;
  void _internal_set_message_id(::int64_t value);

  public:
  // optional int64 group_id = 3;
  bool has_group_id() const;
  void clear_group_id() ;
  ::int64_t group_id() const;
  void set_group_id(::int64_t value);

  private:
  ::int64_t _internal_group_id() const;
  void _internal_set_group_id(::int64_t value);

  public:
  // optional int64 recipient_id = 4;
  bool has_recipient_id() const;
  void clear_recipient_id() ;
  ::int64_t recipient_id() const;
  void set_recipient_id(::int64_t value);

  private:
  ::int64_t _internal_recipient_id() const;
  void _internal_set_recipient_id(::int64_t value);

  public:
  // optional int64 delivery_date = 5;
  bool has_delivery_date() const;
  void clear_delivery_date() ;
  ::int64_t delivery_date() const;
  void set_delivery_date(::int64_t value);

  private:
  ::int64_t _internal_delivery_date() const;
  void _internal_set_delivery_date(::int64_t value);

  public:
  // optional bool is_system_message = 2;
  bool has_is_system_message() const;
  void clear_is_system_message() ;
  bool is_system_message() const;
  void set_is_system_message(bool value);

  private:
  bool _internal_is_system_message() const;
  void _internal_set_is_system_message(bool value);

  public:
  // optional int32 burn_after = 8;
  bool has_burn_after() const;
  void clear_burn_after() ;
  ::int32_t burn_after() const;
  void set_burn_after(::int32_t value);

  private:
  ::int32_t _internal_burn_after() const;
  void _internal_set_burn_after(::int32_t value);

  public:
  // optional int64 pre_message_id = 9;
  bool has_pre_message_id() const;
  void clear_pre_message_id() ;
  ::int64_t pre_message_id() const;
  void set_pre_message_id(::int64_t value);

  private:
  ::int64_t _internal_pre_message_id() const;
  void _internal_set_pre_message_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.CreateMessageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 0, 66, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> records_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::int64_t message_id_;
    ::int64_t group_id_;
    ::int64_t recipient_id_;
    ::int64_t delivery_date_;
    bool is_system_message_;
    ::int32_t burn_after_;
    ::int64_t pre_message_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2fmessage_2fcreate_5fmessage_5frequest_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateMessageRequest

// optional int64 message_id = 1;
inline bool CreateMessageRequest::has_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_message_id() {
  _impl_.message_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t CreateMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.message_id)
  return _internal_message_id();
}
inline void CreateMessageRequest::set_message_id(::int64_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.message_id)
}
inline ::int64_t CreateMessageRequest::_internal_message_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_id_;
}
inline void CreateMessageRequest::_internal_set_message_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_id_ = value;
}

// optional bool is_system_message = 2;
inline bool CreateMessageRequest::has_is_system_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_is_system_message() {
  _impl_.is_system_message_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CreateMessageRequest::is_system_message() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.is_system_message)
  return _internal_is_system_message();
}
inline void CreateMessageRequest::set_is_system_message(bool value) {
  _internal_set_is_system_message(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.is_system_message)
}
inline bool CreateMessageRequest::_internal_is_system_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_system_message_;
}
inline void CreateMessageRequest::_internal_set_is_system_message(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_system_message_ = value;
}

// optional int64 group_id = 3;
inline bool CreateMessageRequest::has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_group_id() {
  _impl_.group_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t CreateMessageRequest::group_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.group_id)
  return _internal_group_id();
}
inline void CreateMessageRequest::set_group_id(::int64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.group_id)
}
inline ::int64_t CreateMessageRequest::_internal_group_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_id_;
}
inline void CreateMessageRequest::_internal_set_group_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_id_ = value;
}

// optional int64 recipient_id = 4;
inline bool CreateMessageRequest::has_recipient_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_recipient_id() {
  _impl_.recipient_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t CreateMessageRequest::recipient_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.recipient_id)
  return _internal_recipient_id();
}
inline void CreateMessageRequest::set_recipient_id(::int64_t value) {
  _internal_set_recipient_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.recipient_id)
}
inline ::int64_t CreateMessageRequest::_internal_recipient_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recipient_id_;
}
inline void CreateMessageRequest::_internal_set_recipient_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.recipient_id_ = value;
}

// optional int64 delivery_date = 5;
inline bool CreateMessageRequest::has_delivery_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_delivery_date() {
  _impl_.delivery_date_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t CreateMessageRequest::delivery_date() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.delivery_date)
  return _internal_delivery_date();
}
inline void CreateMessageRequest::set_delivery_date(::int64_t value) {
  _internal_set_delivery_date(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.delivery_date)
}
inline ::int64_t CreateMessageRequest::_internal_delivery_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delivery_date_;
}
inline void CreateMessageRequest::_internal_set_delivery_date(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.delivery_date_ = value;
}

// optional string text = 6;
inline bool CreateMessageRequest::has_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_text() {
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateMessageRequest::text() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateMessageRequest::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.text)
}
inline std::string* CreateMessageRequest::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.CreateMessageRequest.text)
  return _s;
}
inline const std::string& CreateMessageRequest::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void CreateMessageRequest::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMessageRequest::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.text_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateMessageRequest::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.CreateMessageRequest.text)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.text_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CreateMessageRequest::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.text_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.CreateMessageRequest.text)
}

// repeated bytes records = 7;
inline int CreateMessageRequest::_internal_records_size() const {
  return _internal_records().size();
}
inline int CreateMessageRequest::records_size() const {
  return _internal_records_size();
}
inline void CreateMessageRequest::clear_records() {
  _internal_mutable_records()->Clear();
}
inline std::string* CreateMessageRequest::add_records() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_records()->Add();
  // @@protoc_insertion_point(field_add_mutable:turms.client.model.proto.CreateMessageRequest.records)
  return _s;
}
inline const std::string& CreateMessageRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.records)
  return _internal_records().Get(index);
}
inline std::string* CreateMessageRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.CreateMessageRequest.records)
  return _internal_mutable_records()->Mutable(index);
}
inline void CreateMessageRequest::set_records(int index, const std::string& value) {
  _internal_mutable_records()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::set_records(int index, std::string&& value) {
  _internal_mutable_records()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::set_records(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_records()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::set_records(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_records()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::set_records(int index, absl::string_view value) {
  _internal_mutable_records()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::add_records(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_records()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::add_records(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_records()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::add_records(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_records()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::add_records(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_records()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:turms.client.model.proto.CreateMessageRequest.records)
}
inline void CreateMessageRequest::add_records(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_records()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:turms.client.model.proto.CreateMessageRequest.records)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CreateMessageRequest::records() const {
  // @@protoc_insertion_point(field_list:turms.client.model.proto.CreateMessageRequest.records)
  return _internal_records();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* CreateMessageRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:turms.client.model.proto.CreateMessageRequest.records)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_records();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CreateMessageRequest::_internal_records() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.records_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CreateMessageRequest::_internal_mutable_records() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.records_;
}

// optional int32 burn_after = 8;
inline bool CreateMessageRequest::has_burn_after() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_burn_after() {
  _impl_.burn_after_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t CreateMessageRequest::burn_after() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.burn_after)
  return _internal_burn_after();
}
inline void CreateMessageRequest::set_burn_after(::int32_t value) {
  _internal_set_burn_after(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.burn_after)
}
inline ::int32_t CreateMessageRequest::_internal_burn_after() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.burn_after_;
}
inline void CreateMessageRequest::_internal_set_burn_after(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.burn_after_ = value;
}

// optional int64 pre_message_id = 9;
inline bool CreateMessageRequest::has_pre_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void CreateMessageRequest::clear_pre_message_id() {
  _impl_.pre_message_id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t CreateMessageRequest::pre_message_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateMessageRequest.pre_message_id)
  return _internal_pre_message_id();
}
inline void CreateMessageRequest::set_pre_message_id(::int64_t value) {
  _internal_set_pre_message_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateMessageRequest.pre_message_id)
}
inline ::int64_t CreateMessageRequest::_internal_pre_message_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pre_message_id_;
}
inline void CreateMessageRequest::_internal_set_pre_message_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pre_message_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_request_2fmessage_2fcreate_5fmessage_5frequest_2eproto_2epb_2eh
