// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request/user/create_session_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2fuser_2fcreate_5fsession_5frequest_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_request_2fuser_2fcreate_5fsession_5frequest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry_lite.h"
#include "google/protobuf/map_field_lite.h"
#include "turms/client/model/proto/constant/device_type.pb.h"
#include "turms/client/model/proto/constant/user_status.pb.h"
#include "turms/client/model/proto/model/user/user_location.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_request_2fuser_2fcreate_5fsession_5frequest_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2fuser_2fcreate_5fsession_5frequest_2eproto {
  static const ::uint32_t offsets[];
};
namespace turms {
namespace client {
namespace model {
namespace proto {
class CreateSessionRequest;
struct CreateSessionRequestDefaultTypeInternal;
extern CreateSessionRequestDefaultTypeInternal _CreateSessionRequest_default_instance_;
class CreateSessionRequest_DeviceDetailsEntry_DoNotUse;
struct CreateSessionRequest_DeviceDetailsEntry_DoNotUseDefaultTypeInternal;
extern CreateSessionRequest_DeviceDetailsEntry_DoNotUseDefaultTypeInternal _CreateSessionRequest_DeviceDetailsEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace turms {
namespace client {
namespace model {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class CreateSessionRequest_DeviceDetailsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntryLite<CreateSessionRequest_DeviceDetailsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntryLite<CreateSessionRequest_DeviceDetailsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  CreateSessionRequest_DeviceDetailsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateSessionRequest_DeviceDetailsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CreateSessionRequest_DeviceDetailsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CreateSessionRequest_DeviceDetailsEntry_DoNotUse& other);
  static const CreateSessionRequest_DeviceDetailsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateSessionRequest_DeviceDetailsEntry_DoNotUse*>(&_CreateSessionRequest_DeviceDetailsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "turms.client.model.proto.CreateSessionRequest.DeviceDetailsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "turms.client.model.proto.CreateSessionRequest.DeviceDetailsEntry.value");
 }
  friend struct ::TableStruct_request_2fuser_2fcreate_5fsession_5frequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSessionRequest final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:turms.client.model.proto.CreateSessionRequest) */ {
 public:
  inline CreateSessionRequest() : CreateSessionRequest(nullptr) {}
  ~CreateSessionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateSessionRequest(::google::protobuf::internal::ConstantInitialized);

  CreateSessionRequest(const CreateSessionRequest& from);
  CreateSessionRequest(CreateSessionRequest&& from) noexcept
    : CreateSessionRequest() {
    *this = ::std::move(from);
  }

  inline CreateSessionRequest& operator=(const CreateSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSessionRequest& operator=(CreateSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CreateSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSessionRequest*>(
               &_CreateSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateSessionRequest& a, CreateSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSessionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSessionRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const CreateSessionRequest& from);
  void MergeFrom(const CreateSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateSessionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "turms.client.model.proto.CreateSessionRequest";
  }
  protected:
  explicit CreateSessionRequest(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDeviceDetailsFieldNumber = 6,
    kPasswordFieldNumber = 3,
    kLocationFieldNumber = 7,
    kUserIdFieldNumber = 2,
    kVersionFieldNumber = 1,
    kUserStatusFieldNumber = 4,
    kDeviceTypeFieldNumber = 5,
  };
  // map<string, string> device_details = 6;
  int device_details_size() const;
  private:
  int _internal_device_details_size() const;

  public:
  void clear_device_details() ;
  const ::google::protobuf::Map<std::string, std::string>& device_details() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_device_details();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_device_details() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_device_details();

  public:
  // optional string password = 3;
  bool has_password() const;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // optional .turms.client.model.proto.UserLocation location = 7;
  bool has_location() const;
  void clear_location() ;
  const ::turms::client::model::proto::UserLocation& location() const;
  PROTOBUF_NODISCARD ::turms::client::model::proto::UserLocation* release_location();
  ::turms::client::model::proto::UserLocation* mutable_location();
  void set_allocated_location(::turms::client::model::proto::UserLocation* value);
  void unsafe_arena_set_allocated_location(::turms::client::model::proto::UserLocation* value);
  ::turms::client::model::proto::UserLocation* unsafe_arena_release_location();

  private:
  const ::turms::client::model::proto::UserLocation& _internal_location() const;
  ::turms::client::model::proto::UserLocation* _internal_mutable_location();

  public:
  // int64 user_id = 2;
  void clear_user_id() ;
  ::int64_t user_id() const;
  void set_user_id(::int64_t value);

  private:
  ::int64_t _internal_user_id() const;
  void _internal_set_user_id(::int64_t value);

  public:
  // int32 version = 1;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // optional .turms.client.model.proto.UserStatus user_status = 4;
  bool has_user_status() const;
  void clear_user_status() ;
  ::turms::client::model::proto::UserStatus user_status() const;
  void set_user_status(::turms::client::model::proto::UserStatus value);

  private:
  ::turms::client::model::proto::UserStatus _internal_user_status() const;
  void _internal_set_user_status(::turms::client::model::proto::UserStatus value);

  public:
  // .turms.client.model.proto.DeviceType device_type = 5;
  void clear_device_type() ;
  ::turms::client::model::proto::DeviceType device_type() const;
  void set_device_type(::turms::client::model::proto::DeviceType value);

  private:
  ::turms::client::model::proto::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::turms::client::model::proto::DeviceType value);

  public:
  // @@protoc_insertion_point(class_scope:turms.client.model.proto.CreateSessionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 2, 76, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapFieldLite<CreateSessionRequest_DeviceDetailsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        device_details_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::turms::client::model::proto::UserLocation* location_;
    ::int64_t user_id_;
    ::int32_t version_;
    int user_status_;
    int device_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2fuser_2fcreate_5fsession_5frequest_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateSessionRequest

// int32 version = 1;
inline void CreateSessionRequest::clear_version() {
  _impl_.version_ = 0;
}
inline ::int32_t CreateSessionRequest::version() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateSessionRequest.version)
  return _internal_version();
}
inline void CreateSessionRequest::set_version(::int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateSessionRequest.version)
}
inline ::int32_t CreateSessionRequest::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_;
}
inline void CreateSessionRequest::_internal_set_version(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_ = value;
}

// int64 user_id = 2;
inline void CreateSessionRequest::clear_user_id() {
  _impl_.user_id_ = ::int64_t{0};
}
inline ::int64_t CreateSessionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateSessionRequest.user_id)
  return _internal_user_id();
}
inline void CreateSessionRequest::set_user_id(::int64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateSessionRequest.user_id)
}
inline ::int64_t CreateSessionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void CreateSessionRequest::_internal_set_user_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// optional string password = 3;
inline bool CreateSessionRequest::has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateSessionRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateSessionRequest::password() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateSessionRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateSessionRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateSessionRequest.password)
}
inline std::string* CreateSessionRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.CreateSessionRequest.password)
  return _s;
}
inline const std::string& CreateSessionRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void CreateSessionRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSessionRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateSessionRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.CreateSessionRequest.password)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.password_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CreateSessionRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.CreateSessionRequest.password)
}

// optional .turms.client.model.proto.UserStatus user_status = 4;
inline bool CreateSessionRequest::has_user_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CreateSessionRequest::clear_user_status() {
  _impl_.user_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::turms::client::model::proto::UserStatus CreateSessionRequest::user_status() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateSessionRequest.user_status)
  return _internal_user_status();
}
inline void CreateSessionRequest::set_user_status(::turms::client::model::proto::UserStatus value) {
  _internal_set_user_status(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateSessionRequest.user_status)
}
inline ::turms::client::model::proto::UserStatus CreateSessionRequest::_internal_user_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::turms::client::model::proto::UserStatus>(_impl_.user_status_);
}
inline void CreateSessionRequest::_internal_set_user_status(::turms::client::model::proto::UserStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.user_status_ = value;
}

// .turms.client.model.proto.DeviceType device_type = 5;
inline void CreateSessionRequest::clear_device_type() {
  _impl_.device_type_ = 0;
}
inline ::turms::client::model::proto::DeviceType CreateSessionRequest::device_type() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateSessionRequest.device_type)
  return _internal_device_type();
}
inline void CreateSessionRequest::set_device_type(::turms::client::model::proto::DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:turms.client.model.proto.CreateSessionRequest.device_type)
}
inline ::turms::client::model::proto::DeviceType CreateSessionRequest::_internal_device_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::turms::client::model::proto::DeviceType>(_impl_.device_type_);
}
inline void CreateSessionRequest::_internal_set_device_type(::turms::client::model::proto::DeviceType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_type_ = value;
}

// map<string, string> device_details = 6;
inline int CreateSessionRequest::_internal_device_details_size() const {
  return _internal_device_details().size();
}
inline int CreateSessionRequest::device_details_size() const {
  return _internal_device_details_size();
}
inline void CreateSessionRequest::clear_device_details() {
  _impl_.device_details_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CreateSessionRequest::_internal_device_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_details_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CreateSessionRequest::device_details() const {
  // @@protoc_insertion_point(field_map:turms.client.model.proto.CreateSessionRequest.device_details)
  return _internal_device_details();
}
inline ::google::protobuf::Map<std::string, std::string>* CreateSessionRequest::_internal_mutable_device_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.device_details_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CreateSessionRequest::mutable_device_details() {
  // @@protoc_insertion_point(field_mutable_map:turms.client.model.proto.CreateSessionRequest.device_details)
  return _internal_mutable_device_details();
}

// optional .turms.client.model.proto.UserLocation location = 7;
inline bool CreateSessionRequest::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::turms::client::model::proto::UserLocation& CreateSessionRequest::_internal_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::turms::client::model::proto::UserLocation* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::turms::client::model::proto::UserLocation&>(::turms::client::model::proto::_UserLocation_default_instance_);
}
inline const ::turms::client::model::proto::UserLocation& CreateSessionRequest::location() const {
  // @@protoc_insertion_point(field_get:turms.client.model.proto.CreateSessionRequest.location)
  return _internal_location();
}
inline void CreateSessionRequest::unsafe_arena_set_allocated_location(::turms::client::model::proto::UserLocation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::turms::client::model::proto::UserLocation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:turms.client.model.proto.CreateSessionRequest.location)
}
inline ::turms::client::model::proto::UserLocation* CreateSessionRequest::release_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::turms::client::model::proto::UserLocation* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::turms::client::model::proto::UserLocation* CreateSessionRequest::unsafe_arena_release_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:turms.client.model.proto.CreateSessionRequest.location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::turms::client::model::proto::UserLocation* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::turms::client::model::proto::UserLocation* CreateSessionRequest::_internal_mutable_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::turms::client::model::proto::UserLocation>(GetArenaForAllocation());
    _impl_.location_ = reinterpret_cast<::turms::client::model::proto::UserLocation*>(p);
  }
  return _impl_.location_;
}
inline ::turms::client::model::proto::UserLocation* CreateSessionRequest::mutable_location() {
  ::turms::client::model::proto::UserLocation* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:turms.client.model.proto.CreateSessionRequest.location)
  return _msg;
}
inline void CreateSessionRequest::set_allocated_location(::turms::client::model::proto::UserLocation* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.location_ = reinterpret_cast<::turms::client::model::proto::UserLocation*>(value);
  // @@protoc_insertion_point(field_set_allocated:turms.client.model.proto.CreateSessionRequest.location)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace model
}  // namespace client
}  // namespace turms


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_request_2fuser_2fcreate_5fsession_5frequest_2eproto_2epb_2eh
